version: "3.9"
services:
  api-gateway:
    image: nginx:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - auth-service
      - userprofile-service

  auth-service:
    build:
      context: ./services/auth-service
    command: npm run dev # Use nodemon for hot reload
    ports:
      - "4000:4000"
    environment:
      - DATABASE_URL=postgresql://auth_user:auth_password@postgres:5432/auth_db
      - RABBITMQ_URL=amqp://rabbitmq:5672 # RabbitMQ Connection
    volumes:
      - ./services/auth-service:/usr/src/app
    depends_on:
      - postgres
      - rabbitmq

  userprofile-service:
    build:
      context: ./services/userprofile-service
    command: npm run dev # Use nodemon for hot reload
    ports:
      - "5001:5001"
    environment:
      - DATABASE_URL=${DATABASE_URL} #
      - RABBITMQ_URL=amqp://rabbitmq:5672 # RabbitMQ Connection
      - PORT=5001
    volumes:
      - ./services/userprofile-service:/usr/src/app
    depends_on:
      - mongo
      - rabbitmq
    env_file:
      - .env # Ensure environment variables are loaded
    restart: always

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672" # RabbitMQ communication
      - "15672:15672" # RabbitMQ management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
    driver: local
  mongo_data:
    driver: local
  rabbitmq_data:
    driver: local
